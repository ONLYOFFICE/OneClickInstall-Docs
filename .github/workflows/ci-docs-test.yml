name: OneClickDocs-Install

on:
  push:
    branches:
      - 'hotfix/**'
      - 'release/**'
      - 'develop'
      - 'master'

  workflow_dispatch:

  schedule:
    - cron: '0 21 * * 0'

jobs:
  get-version:
    name: "Get ds version for test"
    runs-on: ubuntu-latest
    outputs:
      ds-ver: ${{ steps.get-version.outputs.ds-ver }}
    steps:
    - name: get-version
      id: get-version
      shell: bash
      run: |
        VERSION=$(curl -sL -H "Accept: application/vnd.github+json" https://api.github.com/repos/ONLYOFFICE/document-server-package/branches?per_page=100 \
          | jq -r '.[] | select(.name|test("^(release|hotfix)/")) | .name' | sort -Vr | head -n1 | awk -F '/' '{print $2}' | sed 's/^v//')
        echo "ds-ver=${VERSION:-99.99.99}" >> "$GITHUB_OUTPUT"

  vagrant-up:
    name: "Test Docs with ${{matrix.name}}"
    needs: [get-version]
    runs-on: ubuntu-22.04
    env:
      VER: ${{ needs.get-version.outputs.ds-ver }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - distr: generic
            os: rhel8
            name: "RHEL 8"

          - distr: generic
            os: rhel9
            name: "RHEL 9"

          - distr: onlyoffice
            os: base-centos8s
            name: "CentOS 8 Stream"

          - distr: onlyoffice
            os: base-centos9s
            name: "CentOS 9 Stream"

          - distr: bento
            os: amazonlinux-2023
            name: "Amazon Linux 2023"

          - distr: onlyoffice
            os: base-debian10
            name: "Debian 10"

          - distr: onlyoffice
            os: base-debian11
            name: "Debian 11"

          - distr: onlyoffice
            os: base-debian12
            name: "Debian 12"

          - distr: onlyoffice
            os: base-debian13
            name: "Debian 13"

          - distr: onlyoffice
            os: base-ubuntu2004
            name: "Ubuntu 20.04"

          - distr: onlyoffice
            os: base-ubuntu2204
            name: "Ubuntu 22.04"

          - distr: onlyoffice
            os: base-ubuntu2404
            name: "Ubuntu 24.04"
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up vagrant and virtualbox
      run: |
           gpg --keyserver keyserver.ubuntu.com --recv-keys A2F683C52980AECF && gpg --export A2F683C52980AECF > /usr/share/keyrings/virtualbox.gpg
           echo "deb [arch=amd64 signed-by=/usr/share/keyrings/virtualbox.gpg] https://download.virtualbox.org/virtualbox/debian $(. /etc/os-release && echo $UBUNTU_CODENAME) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
           curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
           echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
           sudo apt update -y
           sudo apt install vagrant -y
           # Temporary install VBox 7.1.12 via curl (.deb) to avoid SSH/NAT issues in 7.1.14
           curl -fsSL "https://download.virtualbox.org/virtualbox/7.1.12/virtualbox-7.1_7.1.12-169651~Ubuntu~jammy_amd64.deb" -o /tmp/vbox.deb && sudo apt-get install -y /tmp/vbox.deb

    - name: Test production scripts
      if: ${{ github.event_name == 'schedule' }}
      uses: nick-fields/retry@v2
      with:
        max_attempts: 2
        timeout_minutes: 40
        retry_on: error
        command: |
                set -eux
                cd tests/vagrant
                   TEST_CASE='--production-install' \
                   DISTR='${{ matrix.distr }}' \
                   OS='${{ matrix.os }}' \
                   DOWNLOAD_SCRIPT='-ds true' \
                   RAM='4096' \
                   CPU='2' \
                   ARGUMENTS="-arg '--skiphardwarecheck true --makeswap false'" \
                   vagrant up
        on_retry_command: |
              echo "RUN CLEAN UP: Destroy vagrant and one more try"
              cd tests/vagrant
              sleep 10
              vagrant destroy --force

    - name: "Test Local scripts with ver: ${{ needs.get-version.outputs.ds-ver }}"
      if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
      uses: nick-fields/retry@v2
      with:
         max_attempts: 2
         timeout_minutes: 40
         retry_on: error
         command: |
                  set -eux
                  cd tests/vagrant
                    TEST_CASE='--local-install' \
                    DISTR='${{ matrix.distr }}' \
                    OS='${{ matrix.os }}' \
                    RAM='4096' \
                    CPU='2' \
                    VER='-v ${{ env.VER }}' \
                    DOWNLOAD_SCRIPT='-ds false' \
                    TEST_REPO='-tr true' \
                    ARGUMENTS="-arg '--skiphardwarecheck true --makeswap false --localscripts true'" \
                    vagrant up
         on_retry_command: |
                    echo "RUN CLEAN UP: Destroy vagrant and one more try"
                    cd tests/vagrant
                    sleep 10
                    vagrant destroy --force
