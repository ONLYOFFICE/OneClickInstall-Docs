name: Rebuild vagrant Docs

run-name: "Rebuild Docs vagrant boxes version: ${{ github.event.inputs.box-version }} (OS: ${{ github.event.inputs.os-name }})"

on:
  workflow_dispatch:
    inputs:
      box-version:
        type: string
        description: 'Docs version to install in box'
        required: true
      os-name:
        type: string
        description: 'Select distros'
        required: true
        default: |
          centos8s,
          centos9s,
          debian10,
          debian11,
          debian12,
          debian13,
          ubuntu2004,
          ubuntu2204,
          ubuntu2404

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Ensure jq
        run: command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }

      - name: Build matrix from input
        id: mk
        shell: bash
        run: |
          set -euo pipefail
          OS_INPUT="${{ github.event.inputs.os-name }}"

          MAP=$(cat <<'JSON'
          {
            "centos8s":  {"distr":"onlyoffice","os":"base-centos8s"},
            "centos9s":  {"distr":"onlyoffice","os":"base-centos9s"},
            "debian10":  {"distr":"onlyoffice","os":"base-debian10"},
            "debian11":  {"distr":"onlyoffice","os":"base-debian11"},
            "debian12":  {"distr":"onlyoffice","os":"base-debian12"},
            "debian13":  {"distr":"onlyoffice","os":"base-debian13"},
            "ubuntu2004":{"distr":"onlyoffice","os":"base-ubuntu2004"},
            "ubuntu2204":{"distr":"onlyoffice","os":"base-ubuntu2204"},
            "ubuntu2404":{"distr":"onlyoffice","os":"base-ubuntu2404"}
          }
          JSON
          )

          MATRIX="$(jq -cn --arg input "$OS_INPUT" --argjson map "$MAP" '
            def norm: gsub("[\n\r]+"; ",") | gsub("\\s+"; "");
            ($input | norm) as $inp
            | ( if $inp == "all"
                then ($map | keys)
                else ($inp | split(",") | map(select(length>0)) | unique)
              end ) as $keys
            | [ $keys[] as $k
                | select($map | has($k))
                | ({name:$k} + $map[$k])
              ]
            | {include: .}
          ')"

          test "$(jq '.include|length' <<<"$MATRIX")" -gt 0 || { echo "No valid OS selected."; exit 1; }
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  vagrant-up:
    name: "Rebuild Docs ${{ matrix.name }}"
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
      HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
      BOX_VERSION: ${{ github.event.inputs.box-version }}
      VAGRANT_ORG: onlyoffice
      PRODUCT: docs
      OS_NAME: ${{ matrix.name }}
      OS: ${{ matrix.os }}
      DISTR: ${{ matrix.distr }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download hcp CLI
        uses: hashicorp/hcp-setup-action@v0
        with:
          version: latest

      - name: Set up vagrant and virtualbox
        run: |
          gpg --keyserver keyserver.ubuntu.com --recv-keys A2F683C52980AECF && gpg --export A2F683C52980AECF > /usr/share/keyrings/virtualbox.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/virtualbox.gpg] https://download.virtualbox.org/virtualbox/debian $(. /etc/os-release && echo $UBUNTU_CODENAME) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
          sudo wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update -y
          sudo apt-get install -y vagrant virtualbox-7.1

      - name: Test local scripts
        uses: nick-fields/retry@v2
        with:
          max_attempts: 2
          timeout_minutes: 40
          retry_on: error
          command: |
            set -eux
            cd tests/vagrant
            TEST_CASE='--local-install' \
            DISTR='${{ matrix.distr }}' \
            OS='${{ matrix.os }}' \
            DOWNLOAD_SCRIPT='-ds false' \
            RAM='6000' \
            CPU='3' \
            ARGUMENTS="-arg '--skiphardwarecheck true --makeswap false --localscripts true'" \
            vagrant up
            sleep 100
            vagrant package --output ${PRODUCT}-${OS_NAME}.box
            wget https://raw.githubusercontent.com/ONLYOFFICE/ga-common/refs/heads/master/.github/scripts/vagrant_publish.sh
            bash ./vagrant_publish.sh
          on_retry_command: |
            echo "RUN CLEAN UP: Destroy vagrant and one more try"
            cd tests/vagrant
            rm -f ${PRODUCT}-${OS_NAME}.box || true
            sleep 10
            vagrant destroy --force

